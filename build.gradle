import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.7.20'
    id 'application'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20'
}

def kotlinVersion = "1.7.20-Beta"
def serializationVersion = "1.3.3"
def ktorVersion = "2.2.4"
def logbackVersion = "1.2.11"
def kotlinWrappersVersion = "1.0.0-pre.354"
def kmongoVersion = "4.5.0"
def exposedVersion = "0.40.1"


group = 'com.santansarah'
version = '1.0-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url 'https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven' }
}

kotlin {
    jvm {
        compilations.configureEach {
            kotlinOptions.jvmTarget = "11"
        }
        withJava()
        testRuns["test"].executionTask.configure {
            useJUnitPlatform()
        }
    }
    js(IR) {
        binaries.executable()
        browser {
            commonWebpackConfig {
                sourceMaps = false
                cssSupport.enabled = true
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion"
                implementation "io.ktor:ktor-client-core:$ktorVersion"
            }

        }
        commonTest {
            dependencies {
                implementation kotlin('test')
            }
        }
        jvmMain {
            dependencies {
                implementation "io.ktor:ktor-server-netty:$ktorVersion"
                implementation "io.ktor:ktor-server-html-builder-jvm:$ktorVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:0.8.0"

                implementation "io.ktor:ktor-serialization:$ktorVersion"
                implementation "io.ktor:ktor-server-content-negotiation:$ktorVersion"
                implementation "io.ktor:ktor-serialization-kotlinx-json:$ktorVersion"
                implementation "io.ktor:ktor-server-cors:$ktorVersion"
                implementation "io.ktor:ktor-server-compression:$ktorVersion"
                implementation "io.ktor:ktor-server-core-jvm:$ktorVersion"
                implementation "ch.qos.logback:logback-classic:$logbackVersion"
                implementation "org.litote.kmongo:kmongo-coroutine-serialization:$kmongoVersion"

                implementation "org.jetbrains.exposed:exposed-core:$exposedVersion"
                implementation "org.jetbrains.exposed:exposed-dao:$exposedVersion"
                implementation "org.jetbrains.exposed:exposed-jdbc:$exposedVersion"

                // database
                implementation "org.jetbrains.exposed:exposed-java-time:$exposedVersion"
                implementation "org.xerial:sqlite-jdbc:3.36.0.3"

                // ktor client
                implementation "io.ktor:ktor-client-core:$ktorVersion"
                implementation "io.ktor:ktor-client-cio:$ktorVersion"
                implementation "io.ktor:ktor-client-content-negotiation:$ktorVersion"
                implementation "io.ktor:ktor-serialization-kotlinx-json:$ktorVersion"
                implementation "io.ktor:ktor-client-logging:$ktorVersion"

                // Koin for Ktor
                implementation "io.insert-koin:koin-ktor:3.3.1"
                implementation "io.insert-koin:koin-logger-slf4j:3.3.1"
            }
        }
        jvmTest {

        }
        jsMain {
            dependencies {
                //implementation 'org.jetbrains.kotlin-wrappers:kotlin-react:18.2.0-pre.346'
                //implementation 'org.jetbrains.kotlin-wrappers:kotlin-react-dom:18.2.0-pre.346'
                //implementation 'org.jetbrains.kotlin-wrappers:kotlin-emotion:11.9.3-pre.346'
                //implementation 'org.jetbrains.kotlin-wrappers:kotlin-react-router-dom:6.3.0-pre.346'

                 // React, React DOM + Wrappers
                implementation project.dependencies.enforcedPlatform("org.jetbrains.kotlin-wrappers:kotlin-wrappers-bom:$kotlinWrappersVersion")
                implementation "org.jetbrains.kotlin-wrappers:kotlin-react"
                implementation "org.jetbrains.kotlin-wrappers:kotlin-react-dom"
                implementation 'org.jetbrains.kotlin-wrappers:kotlin-react-router-dom'

                // Kotlin React Emotion (CSS)
                implementation "org.jetbrains.kotlin-wrappers:kotlin-emotion"

                implementation "io.ktor:ktor-client-js:$ktorVersion"
                implementation "io.ktor:ktor-client-content-negotiation:$ktorVersion"
                implementation "io.ktor:ktor-serialization-kotlinx-json:$ktorVersion"

                // Video Player
                implementation npm("react-player", "2.10.1")

                // Share Buttons
                implementation npm("react-share", "4.4.0")

                // Coroutines & serialization
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3"
            }
        }
        jsTest {

        }
    }
}

application {
    mainClassName = 'ServerKt'
}

// include JS artifacts in any generated JAR
tasks.getByName("jvmJar") {
    def taskName = "jsBrowserDevelopmentWebpack"

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    def webpackTask = tasks.getByName(taskName)
    dependsOn(webpackTask) // make sure JS gets compiled first
    //from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) // bring output file along into the JAR
    from(webpackTask.name, webpackTask.destinationDirectory)

}

tasks.named('jvmProcessResources') {
    def jsBrowserDistribution = tasks.named('jsBrowserDistribution')
    from(jsBrowserDistribution)
}

tasks.named('run') {
    dependsOn(tasks.named('jvmJar'))
    classpath(tasks.named('jvmJar'))
}